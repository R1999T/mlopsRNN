{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1BK5ncwtlkVaipJIBB4yg9nvafI9MFRZO",
      "authorship_tag": "ABX9TyNqGwc0/RYagB7Fg/pSlbc+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/R1999T/mlopsRNN/blob/master/model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GWRzjRtmF-JM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import  pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FVvOVpYnNXkC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dataset_train = pd.read_csv(\"/content/Google_Stock_Price_Train.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D1v3JzA6PH22",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "5c99a5be-cd1d-4314-c188-884c8fb6c1a3"
      },
      "source": [
        "dataset_train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1/3/2012</td>\n",
              "      <td>325.25</td>\n",
              "      <td>332.83</td>\n",
              "      <td>324.97</td>\n",
              "      <td>663.59</td>\n",
              "      <td>7,380,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/4/2012</td>\n",
              "      <td>331.27</td>\n",
              "      <td>333.87</td>\n",
              "      <td>329.08</td>\n",
              "      <td>666.45</td>\n",
              "      <td>5,749,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/5/2012</td>\n",
              "      <td>329.83</td>\n",
              "      <td>330.75</td>\n",
              "      <td>326.89</td>\n",
              "      <td>657.21</td>\n",
              "      <td>6,590,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1/6/2012</td>\n",
              "      <td>328.34</td>\n",
              "      <td>328.77</td>\n",
              "      <td>323.68</td>\n",
              "      <td>648.24</td>\n",
              "      <td>5,405,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1/9/2012</td>\n",
              "      <td>322.04</td>\n",
              "      <td>322.29</td>\n",
              "      <td>309.46</td>\n",
              "      <td>620.76</td>\n",
              "      <td>11,688,800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1253</th>\n",
              "      <td>12/23/2016</td>\n",
              "      <td>790.90</td>\n",
              "      <td>792.74</td>\n",
              "      <td>787.28</td>\n",
              "      <td>789.91</td>\n",
              "      <td>623,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1254</th>\n",
              "      <td>12/27/2016</td>\n",
              "      <td>790.68</td>\n",
              "      <td>797.86</td>\n",
              "      <td>787.66</td>\n",
              "      <td>791.55</td>\n",
              "      <td>789,100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1255</th>\n",
              "      <td>12/28/2016</td>\n",
              "      <td>793.70</td>\n",
              "      <td>794.23</td>\n",
              "      <td>783.20</td>\n",
              "      <td>785.05</td>\n",
              "      <td>1,153,800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1256</th>\n",
              "      <td>12/29/2016</td>\n",
              "      <td>783.33</td>\n",
              "      <td>785.93</td>\n",
              "      <td>778.92</td>\n",
              "      <td>782.79</td>\n",
              "      <td>744,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1257</th>\n",
              "      <td>12/30/2016</td>\n",
              "      <td>782.75</td>\n",
              "      <td>782.78</td>\n",
              "      <td>770.41</td>\n",
              "      <td>771.82</td>\n",
              "      <td>1,770,000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1258 rows Ã— 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            Date    Open    High     Low   Close      Volume\n",
              "0       1/3/2012  325.25  332.83  324.97  663.59   7,380,500\n",
              "1       1/4/2012  331.27  333.87  329.08  666.45   5,749,400\n",
              "2       1/5/2012  329.83  330.75  326.89  657.21   6,590,300\n",
              "3       1/6/2012  328.34  328.77  323.68  648.24   5,405,900\n",
              "4       1/9/2012  322.04  322.29  309.46  620.76  11,688,800\n",
              "...          ...     ...     ...     ...     ...         ...\n",
              "1253  12/23/2016  790.90  792.74  787.28  789.91     623,400\n",
              "1254  12/27/2016  790.68  797.86  787.66  791.55     789,100\n",
              "1255  12/28/2016  793.70  794.23  783.20  785.05   1,153,800\n",
              "1256  12/29/2016  783.33  785.93  778.92  782.79     744,300\n",
              "1257  12/30/2016  782.75  782.78  770.41  771.82   1,770,000\n",
              "\n",
              "[1258 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VIfgyY49PU-g",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dataset_test = pd.read_csv('/content/drive/My Drive/Machine learningDatasets/RNNgoogleStOCKprice/Google_Stock_Price_Test.csv', index_col=0)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-3sXlmwIP62A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "fe7bbcfb-d6a1-4fd3-9243-72754e03fc91"
      },
      "source": [
        "dataset_test.head()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1/3/2017</th>\n",
              "      <td>778.81</td>\n",
              "      <td>789.63</td>\n",
              "      <td>775.80</td>\n",
              "      <td>786.14</td>\n",
              "      <td>1,657,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/4/2017</th>\n",
              "      <td>788.36</td>\n",
              "      <td>791.34</td>\n",
              "      <td>783.16</td>\n",
              "      <td>786.90</td>\n",
              "      <td>1,073,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/5/2017</th>\n",
              "      <td>786.08</td>\n",
              "      <td>794.48</td>\n",
              "      <td>785.02</td>\n",
              "      <td>794.02</td>\n",
              "      <td>1,335,200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/6/2017</th>\n",
              "      <td>795.26</td>\n",
              "      <td>807.90</td>\n",
              "      <td>792.20</td>\n",
              "      <td>806.15</td>\n",
              "      <td>1,640,200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/9/2017</th>\n",
              "      <td>806.40</td>\n",
              "      <td>809.97</td>\n",
              "      <td>802.83</td>\n",
              "      <td>806.65</td>\n",
              "      <td>1,272,400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Open    High     Low   Close     Volume\n",
              "Date                                               \n",
              "1/3/2017  778.81  789.63  775.80  786.14  1,657,300\n",
              "1/4/2017  788.36  791.34  783.16  786.90  1,073,000\n",
              "1/5/2017  786.08  794.48  785.02  794.02  1,335,200\n",
              "1/6/2017  795.26  807.90  792.20  806.15  1,640,200\n",
              "1/9/2017  806.40  809.97  802.83  806.65  1,272,400"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m5ozw7viQERv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "training_set = dataset_train[ ['Open']  ]"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IuFpIVYIQLkw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "68f76ba8-2709-4add-c871-681e9bd5ef52"
      },
      "source": [
        "type(training_set)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XlRrRU1BQP4_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "c8cd9bd7-9898-4158-eae7-f44745b3e1a0"
      },
      "source": [
        "training_set.plot()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa5fa185710>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ioeSexMaQUdv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "real_stock_price = dataset_test[ [ 'Open']  ]"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "manhcyyOQevv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "9a98708f-df6d-40c7-af2e-fff4e8df8ab2"
      },
      "source": [
        "real_stock_price.plot()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa5fa08d438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JgtUUDp2Qh6Q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "af31823f-0fd3-4cfd-bad0-a02661b32108"
      },
      "source": [
        "training_set.shape"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1258, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LlMljTxGQn-P",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "63873d33-764e-48a1-cdf5-c0d443050601"
      },
      "source": [
        "len(training_set)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1258"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZEVnhSkNQtig",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a1wgDIAGQ1qP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sc  =  MinMaxScaler(feature_range=(0,1))"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w8tXgQvCQ5uv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "training_set_scaled = sc.fit_transform(training_set)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cl3RX7YiRCVP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "c2756367-d3a7-45e5-9564-169c63eca282"
      },
      "source": [
        "training_set_scaled"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.08581368],\n",
              "       [0.09701243],\n",
              "       [0.09433366],\n",
              "       ...,\n",
              "       [0.95725128],\n",
              "       [0.93796041],\n",
              "       [0.93688146]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hmpK5arNRMPf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "b5cc3be3-a6db-4bcd-a369-365153a0e96e"
      },
      "source": [
        "training_set_scaled[0:60, 0]"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.08581368, 0.09701243, 0.09433366, 0.09156187, 0.07984225,\n",
              "       0.0643277 , 0.0585423 , 0.06568569, 0.06109085, 0.06639259,\n",
              "       0.0614257 , 0.07474514, 0.02797827, 0.02379269, 0.02409033,\n",
              "       0.0159238 , 0.01078949, 0.00967334, 0.01642607, 0.02100231,\n",
              "       0.02280676, 0.02273235, 0.02810849, 0.03212665, 0.0433812 ,\n",
              "       0.04475779, 0.04790163, 0.0440695 , 0.04648783, 0.04745517,\n",
              "       0.04873875, 0.03936305, 0.04137213, 0.04034898, 0.04784582,\n",
              "       0.04325099, 0.04356723, 0.04286033, 0.04602277, 0.05398467,\n",
              "       0.05738894, 0.05714711, 0.05569611, 0.04421832, 0.04514845,\n",
              "       0.04605997, 0.04412531, 0.03675869, 0.04486941, 0.05065481,\n",
              "       0.05214302, 0.05612397, 0.05818885, 0.06540665, 0.06882953,\n",
              "       0.07243843, 0.07993526, 0.07846566, 0.08034452, 0.08497656])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lrZCZxAPRdsf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "933062d4-d0ca-488b-89f3-ffdea355696d"
      },
      "source": [
        "training_set_scaled[60, 0]"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.08627874097775134"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kD3v_G0ZR3Xh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_train = training_set_scaled[0, 0]"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fOOz8ApqSvO3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = []"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9a6PQqP6Sy4_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_train = []"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vP4wa_dtTA0K",
        "colab_type": "text"
      },
      "source": [
        "ask"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nZR_pod5S08_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(60, 1258):\n",
        "    X_train.append(training_set_scaled[i-60:i, 0])\n",
        "    y_train.append(training_set_scaled[i, 0])"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zgRuQFqjS9Ff",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "146e80ee-2c32-40d3-c935-d7b0b950169f"
      },
      "source": [
        "type(y_train)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FNQJq0VzTGtP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fi4j34KiTOG_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = np.array(X_train)\n",
        "y_train = np.array(y_train)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9XpIH4jlTSVv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "ede6f211-a7fb-456e-f06c-137e71ab76c6"
      },
      "source": [
        "type(X_train)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BNNuT4agTaKv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "f2eaa2a5-5241-45e1-a528-71574272536b"
      },
      "source": [
        "X_train.shape"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1198, 60)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N14eAwa5TdwP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = np.reshape(X_train , (X_train.shape[0]  ,  X_train.shape[1], 1 ))"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ehn8MtXXThSv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "395464e1-93fa-436e-f84f-2a8963ff949d"
      },
      "source": [
        "y_train.shape"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1198,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-lCHCFaZTmgB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "1a86bde2-08d7-4606-e774-5acc89af2f20"
      },
      "source": [
        "X_train.shape"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1198, 60, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FhIYQ_ElTreB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4076ad03-33be-4f4c-b46e-a703191e890c"
      },
      "source": [
        "from  keras.models import Sequential"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fyV8DE0yTwkf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.layers import Dense"
      ],
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PLMUYXRbUWKr",
        "colab_type": "text"
      },
      "source": [
        "Long Short-Term Memory layer "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CGpdq22QT0xO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.layers import LSTM"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xPbb8-0HT4k-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = Sequential()"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bzgu5W6MUC_Q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.add(LSTM(units=60 , return_sequences= True ,input_shape = ( X_train.shape[1] ,1)))"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "das3CMkrUJP_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "1fd6048e-1a31-400f-f795-5c5581611e96"
      },
      "source": [
        "model.layers"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<keras.layers.recurrent.LSTM at 0x7fa5b09bb8d0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OP1nQqRmUMlf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.add(LSTM(units=60 , return_sequences= True ))"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xg6ZghYCaLf0",
        "colab_type": "text"
      },
      "source": [
        "Adds a layer instance on top of the layer stack.\n",
        "\n",
        "# Arguments\n",
        "\n",
        "    layer: layer instance.  \n",
        "# Raises\n",
        "\n",
        "    TypeError: If `layer` is not a layer instance.  \n",
        "    ValueError: In case the `layer` argument does not  \n",
        "        know its input shape.  \n",
        "    ValueError: In case the `layer` argument has  \n",
        "        multiple output tensors, or is already connected  \n",
        "        somewhere else (forbidden in `Sequential` models)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pdywUCvsUqM3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.add(LSTM(units=60 ))"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oDMEVcP7Uu0f",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.add(Dense(units=1))"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xomB_VzVVA6B",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.compile(optimizer='adam', loss = 'mean_squared_error')"
      ],
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AtDZ8wm1VFGF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "614e3d3e-c1c4-48d6-fc12-4b44bb2bf323"
      },
      "source": [
        "model.fit(X_train, y_train, epochs=100)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "1198/1198 [==============================] - 5s 4ms/step - loss: 0.0359\n",
            "Epoch 2/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0023\n",
            "Epoch 3/100\n",
            "1198/1198 [==============================] - 4s 3ms/step - loss: 0.0016\n",
            "Epoch 4/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0016\n",
            "Epoch 5/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0016\n",
            "Epoch 6/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0017\n",
            "Epoch 7/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0016\n",
            "Epoch 8/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0015\n",
            "Epoch 9/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0014\n",
            "Epoch 10/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0014\n",
            "Epoch 11/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0013\n",
            "Epoch 12/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0012\n",
            "Epoch 13/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0012\n",
            "Epoch 14/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0012\n",
            "Epoch 15/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0011\n",
            "Epoch 16/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0012\n",
            "Epoch 17/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0011\n",
            "Epoch 18/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0011\n",
            "Epoch 19/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0013\n",
            "Epoch 20/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 0.0010\n",
            "Epoch 21/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 9.2318e-04\n",
            "Epoch 22/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 8.7352e-04\n",
            "Epoch 23/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 9.8111e-04\n",
            "Epoch 24/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 8.6886e-04\n",
            "Epoch 25/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 7.6883e-04\n",
            "Epoch 26/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 7.4270e-04\n",
            "Epoch 27/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 7.0037e-04\n",
            "Epoch 28/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 7.7590e-04\n",
            "Epoch 29/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.6917e-04\n",
            "Epoch 30/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.4158e-04\n",
            "Epoch 31/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.2560e-04\n",
            "Epoch 32/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.9603e-04\n",
            "Epoch 33/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.2073e-04\n",
            "Epoch 34/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.2825e-04\n",
            "Epoch 35/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 5.9912e-04\n",
            "Epoch 36/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 5.3224e-04\n",
            "Epoch 37/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.4395e-04\n",
            "Epoch 38/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 5.2140e-04\n",
            "Epoch 39/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.7264e-04\n",
            "Epoch 40/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.1155e-04\n",
            "Epoch 41/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 5.1960e-04\n",
            "Epoch 42/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 6.2640e-04\n",
            "Epoch 43/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 5.3129e-04\n",
            "Epoch 44/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.3692e-04\n",
            "Epoch 45/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.5846e-04\n",
            "Epoch 46/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.7828e-04\n",
            "Epoch 47/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.5554e-04\n",
            "Epoch 48/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.2860e-04\n",
            "Epoch 49/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.6070e-04\n",
            "Epoch 50/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.8128e-04\n",
            "Epoch 51/100\n",
            "1198/1198 [==============================] - 5s 4ms/step - loss: 3.6006e-04\n",
            "Epoch 52/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.6957e-04\n",
            "Epoch 53/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.0317e-04\n",
            "Epoch 54/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.9944e-04\n",
            "Epoch 55/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.9656e-04\n",
            "Epoch 56/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.2991e-04\n",
            "Epoch 57/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.6546e-04\n",
            "Epoch 58/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.4934e-04\n",
            "Epoch 59/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.5227e-04\n",
            "Epoch 60/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.9267e-04\n",
            "Epoch 61/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3156e-04\n",
            "Epoch 62/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.4950e-04\n",
            "Epoch 63/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.1407e-04\n",
            "Epoch 64/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.2804e-04\n",
            "Epoch 65/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.2301e-04\n",
            "Epoch 66/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.2706e-04\n",
            "Epoch 67/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.8528e-04\n",
            "Epoch 68/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.5051e-04\n",
            "Epoch 69/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.5183e-04\n",
            "Epoch 70/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.1107e-04\n",
            "Epoch 71/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.4332e-04\n",
            "Epoch 72/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.0303e-04\n",
            "Epoch 73/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.5782e-04\n",
            "Epoch 74/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.0778e-04\n",
            "Epoch 75/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.2476e-04\n",
            "Epoch 76/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.0752e-04\n",
            "Epoch 77/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3794e-04\n",
            "Epoch 78/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.1802e-04\n",
            "Epoch 79/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.0567e-04\n",
            "Epoch 80/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3589e-04\n",
            "Epoch 81/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.7416e-04\n",
            "Epoch 82/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.2888e-04\n",
            "Epoch 83/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3043e-04\n",
            "Epoch 84/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.0528e-04\n",
            "Epoch 85/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3338e-04\n",
            "Epoch 86/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.1932e-04\n",
            "Epoch 87/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.4704e-04\n",
            "Epoch 88/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3372e-04\n",
            "Epoch 89/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.4854e-04\n",
            "Epoch 90/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.5337e-04\n",
            "Epoch 91/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3791e-04\n",
            "Epoch 92/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.0825e-04\n",
            "Epoch 93/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 2.7860e-04\n",
            "Epoch 94/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 2.7926e-04\n",
            "Epoch 95/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 4.0560e-04\n",
            "Epoch 96/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 2.9478e-04\n",
            "Epoch 97/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.2134e-04\n",
            "Epoch 98/100\n",
            "1198/1198 [==============================] - 4s 4ms/step - loss: 3.3184e-04\n",
            "Epoch 99/100\n",
            "1198/1198 [==============================] - 5s 4ms/step - loss: 3.3290e-04\n",
            "Epoch 100/100\n",
            "1198/1198 [==============================] - 5s 4ms/step - loss: 2.9757e-04\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.callbacks.History at 0x7fa5a7afdfd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u3ozoLUQVIwd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "a4d3a5bf-bf68-4e5e-96ee-5659d0b563e5"
      },
      "source": [
        "model.get_weights"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Network.get_weights of <keras.engine.sequential.Sequential object at 0x7fa5b09bb240>>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l5h-D_IEY8F-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}